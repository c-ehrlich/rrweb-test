import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import { record, pack, unpack } from "rrweb";

import { api } from "~/utils/api";

import rrwebPlayer from "rrweb-player";
import "rrweb-player/dist/style.css";

export default function Home() {
  const [count, setCount] = useState(0);
  const [lastRecording, setLastRecording] = useState<any>(null);

  const rrwebRef = useRef(null);
  const eventsRef = useRef([]);

  // console.log("rrweb", rrweb);

  const handleStartRecording = () => {
    rrwebRef.current = record({
      emit: (event) => {
        eventsRef.current.push(event);
      },
      sampling: {
        mousemove: true,
        mouseInteraction: true,
      },
    });
  };

  const handleStopecording = () => {
    rrwebRef.current?.();
    console.log("events:", eventsRef.current);
    setLastRecording(eventsRef.current);
    eventsRef.current = [];
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            rrweb test
          </h1>
          <input type="text" className="bg-slate-300 p-4" />
          <button
            className="bg-slate-300 p-4"
            onClick={() => setCount((c) => c + 1)}
          >
            Count is {count}
          </button>
          <div className="flex">
            {count > 0 ? (
              new Array(count).fill(false).map((_, i) => <div>item {i}</div>)
            ) : (
              <div>no items</div>
            )}
          </div>
          <div className="flex gap-4">
            <button className="bg-slate-300 p-4" onClick={handleStartRecording}>
              Record
            </button>
            <button className="bg-slate-300 p-4" onClick={handleStopecording}>
              Stop
            </button>
          </div>
          {lastRecording && <RRWebPlayback events={lastRecording} />}
        </div>
      </main>
    </>
  );
}

function RRWebPlayback(props: { events: any }) {
  const ref = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (ref.current) {
      console.log(`${JSON.stringify(props.events).length} characters unpacked`);
      console.log(
        `${JSON.stringify(pack(props.events)).length} characters packed`,
      );
      console.log(JSON.stringify(pack(props.events)));
      const player = new rrwebPlayer({
        target: ref.current,
        props,
      });
    }

    return () => {
      if (ref.current) {
        ref.current.innerHTML = "";
      }
    };
  }, []);

  return (
    <div>
      <p>player</p>
      <div ref={ref}></div>
    </div>
  );
}
